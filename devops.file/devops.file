devops is a process of improving the dapplication delivery 
1.automation
2.quality
3.continous monitoring 
4.continous testing 


Why devops?
   delivery the application in fast and smooth with high level testing and continous releasing the application

  1.before 10 years releasing the application in server will take to much of time to deploy the code to server, because it will inculde alot of people to do
  manual work to deploy the codes in server
        system admin, build engineer and  server admin so it will take long days to deploy the code in server with manual efforts


now the devops is evolved here to improve the process of delivery


                                     AWS
                                   -------
   1.introduction of AWS  -- started 07/10/2024
   2.IAM(identity and access management)--> how to create user in AWS
   3.EC2 instance
   4.AWS Networking (VPC)
   5.AWS security
   6.AWS route 53 
   7.Secure VPC setup with EC2 instances
   8,Amazon s3(simple storage service)
   9.Aws cloud formation
   10.AWS Elastic Beanstalk
   11.AWS code commit 
   12.AWS code pipeline
   13.SWS code build
   14.AWS code deploy
   15.AWS Cloud watch
   16.AWS lambda
   17.AWS cloud watch events and event bridge  --->important
   18.AWS cloud trail
   19.AWS dynamoDB
   20.AWS ECS  
   21.AWS ECR
   22.AWS EKS(Elastic kubernetes service)
   23.AWS cloud watch log  
   24. AWS secrets manager
   25.AWS auto scaling
   26.AWS RDS(relational database service)
   27.AWS Elastic load Balancer
   28.AWS system manager
   29.AWS cloud migrataion strategies and tools
   30.AWS best practies and job perparation



introduction of AWS


what is cloud ---------- 
what is viruzalation -------- to solve the wasting resources in server -(for example if we have 100 gb ram for the particular server , we can deployed the 
the application which is having 1gb then the remaining 99 gb will be wasted- so using viruzalation we can create virtual layer in server so we can
deploy multiple application in server by using viruzalation)



private cloud  
A private cloud is dedicated exclusively to one organization, meaning the infrastructure is either hosted on-premises or by a 
third-party service provider, but is not shared with other organizations. It provides greater control and security    

Public cloud 
The public cloud is a type of cloud computing where services (e.g., servers, storage, and applications) are delivered over the 
internet and shared among multiple organizations. These services are provided by third-party cloud providers, and users only pay 
for what they use

Key Differences Between Public and Private Cloud:

Feature	                                   Public Cloud	                                      Private Cloud
Ownership	                      Third-party cloud providers	                          Single organization
Scalability                      	Virtually unlimited	                                  Limited by hardware
Cost	                              Pay-as-you-go	                                      Higher upfront costs
Security	                Shared infrastructure, potential risks	               Higher security, isolated resources
Management	                        Managed by provider	                             Managed by the organization
Deployment	                        Over the internet	                            On-premises or dedicated hosting
Accessibility	          Accessible globally over the internet	                    Often limited to internal networks


what is AWS IAM----->why we need AWS IAM

IAM (Identity and Access Management) in AWS is a service that helps manage access to AWS resources in a secure and controlled manner.
 It allows you to define who (users, groups, roles) can access which AWS services and resources, and under what conditions.


Users:

IAM users represent individuals or applications that need access to AWS resources.
Each user has a unique identity and can be assigned individual security credentials (e.g., access keys or passwords).
You can define what actions the user is allowed to perform via permissions.

Groups:

A collection of IAM users.
You can assign permissions to a group, and each user in the group inherits those permissions. 
This simplifies the management of permissions for multiple users.

Roles:

IAM roles are like users but are intended to be assumed by entities such as users, applications, or services (even other AWS services).
Roles provide temporary access to AWS resources, which is useful for applications or services that need limited access for specific tasks.
Common use cases include allowing EC2 instances or Lambda functions to interact with other AWS services without hardcoding credentials.

Roles are created for temporary uses - majorly if we have two AWS account if u want to talk between them we can use roles to connects

And roles is created outside of the AWS

Policies:

Policies define permissions and control what actions are allowed on specific AWS resources.
Policies are written in JSON format and can be attached to users, groups, or roles.

Authentication:

IAM allows you to authenticate users via a username and password or access keys.
Multi-factor authentication (MFA) can be enabled for extra security.

Authorization:

After authentication, IAM checks if the authenticated user, group, or role is authorized to perform specific actions.
This is done by evaluating policies attached to users, groups, or roles



IAM Users details

User name	               Password	                             Console sign-in URL
Testing-user-1	           Testuser@1               https://891377140182.signin.aws.amazon.com/console






---------------------------------------------------------------EC2 ------------------------------------------------------------
Elastic cloud compute  is called EC2

Elastic ----- prefix is used between all the services provided by AWS because we can increase the size of the container and reduce the size of the
container as per the usage 

cloud -------- this represent using the platform 

compute ----------- Computer-- CPU,Disk,RAM mostly asking the virutual server

An EC2 (Elastic Compute Cloud) instance is a virtual server in Amazon's Elastic Compute Cloud (EC2) for running applications on the AWS infrastructure.
EC2 is one of the core services of AWS, providing scalable computing capacity in the cloud. This allows you to launch virtual machines (VMs)
on demand, configure their hardware (CPU, memory, storage), and run various applications without needing to invest in physical hardware.


Virtual Machine: 
An EC2 instance is a virtual server with a specific amount of CPU, memory, and storage capacity. 
It acts like a physical computer but is managed entirely by AWS in the cloud.

Instance Types:
  1.General Purpose: Balanced resources for a variety of workloads (e.g., t2.micro, m5.large).
  2.Compute Optimized: High CPU-to-memory ratio, ideal for CPU-intensive tasks (e.g., c5.large).
  3.Memory Optimized: Designed for memory-intensive applications (e.g., r5.large)
  4.Storage Optimized: High-performance storage (e.g., i3.large).
  5.GPU Instances: For graphics-intensive applications, machine learning, and AI (e.g., p3.2xlarge).

  
  How to create EC2 instance in AWS------------------------------------------------------------------------
  
  search - EC2 ------------> click launch instance------------------------> NAME and TAGS ---------> give any name for the instance 
  select the OS which u r going to use -----> instance type(customise the ram or memory setup for the instance)--------------> 
  Key and pair (act like username and password to use the instance)once key and pair is created it will download the private key file
  Network setting 
  
  
  how to host the ec2 instance in windows

  in windows by the use of moboxtream we lanuch our ec2 instance in aws
  1.Once run the application in ubuntu, the default port number is 8080 and after we need to add the port number in the created instance network security\
  aws

  
  
------------------------------------------------------virutual private cloud(VPC)-----------------------------------------------------------------
  
  
  How we define a size of the VPC ---> to define the size of the VPC is using IP address range


   how we define and ask the range to AWS ----> by using IP address 


   1.if aws is given one VPC including the some particular IP address range to the customer ,
   
   2.Then the customer will split the VPC given by the AWS by using IP range, they can split multiple server and IP address to use 

   3.That is called subnet, spliting the VPC given by aws


   VPC (Virtual Private Cloud) in AWS is a logically isolated network that allows you to define and control a virtual environment where you can
   launch and run AWS resources like EC2 instances, databases, and other services. It gives you complete control over your virtual networking 
   environment, including IP addresses, subnets, route tables, security, and internet gateways. A VPC mimics a traditional network setup in an 
   on-premises data center but operates entirely within the cloud.

   Key Features of a VPC:
   -----------------------

   Isolation and Control:

    1.A VPC is logically isolated from other AWS customers' VPCs, providing security and control over network configurations.
    2.You control the size of your VPC and assign your own IP address ranges (using IPv4 or IPv6).
  
   
   Subnets:

   1.A VPC can be divided into multiple subnets, each representing a range of IP addresses within the VPC.
   2.Private Subnets: Used for resources that are not exposed to the internet (e.g., databases, internal services).
   3.Public Subnets: Used for resources that need to interact with the internet (e.g., web servers).

   Route Tables:

   Route tables determine how traffic is directed within the VPC, both internally between subnets and externally to the internet.
   You can configure custom route tables for each subnet to control network traffic.
   (route is like if load balancer is send a request to that private Ip via route tables) 

   Internet Gateway:

   An Internet Gateway (IGW) is a component that allows communication between instances in your VPC and the internet.
   Only instances in public subnets, which have a route to the internet gateway, can directly access the internet.
   (Internet gateway is the gateway for the VPC which is get it from AWS , the outside IP or network should reach internet gateway first to access the VPC)
  
   NAT Gateway:

   A NAT (Network Address Translation) Gateway allows instances in private subnets to access the internet for software updates or 
   outbound traffic without being directly accessible from the internet.  
   (NAT is like send our IP with masked , so by masking that hackers or others can't know the IP address of ours)

   Security Groups:*

   Security Groups act as virtual firewalls for your EC2 instances to control inbound and outbound traffic.
   They operate at the instance level and can be applied to multiple instances.
   (Security groups is like once load balancer send the request via routes , then routes table will try to give a way to subnet before accessing 
   that security groups need to give the approval)
   1.Security groups act in a instance level
   
   what is inbound and outbound traffic 
      If we try to access the application as user it is called inbound traffice
      If the application try to access the outside worlds(outside internet) that is called outbound traffic

      Security is always 50-50 by AWS ---> aws will do the 50% of the security work and the remaining will done by devops engineer
      so if we didn't add any Security groups AWS will default add the SG to the instance 
        1.It will allow all the outbound traffice export portnumber 25
              (what is port 25 ----  this is mailing activity aws doesnt allow any span activity to the system)
        2.and it will not allow any inbound traffic defaultly

        ***** security group only for allowing the traffic, SG doesn't deny traffic





   Network Access Control Lists (NACLs):*

   NACLs are optional and act as firewalls at the subnet level to control traffic entering and leaving the subnet.
   Unlike security groups, which are stateful, NACLs are stateless, meaning rules must be explicitly defined for both inbound and 
   outbound traffic.
   1.NACLs is act in a subnet level

      NACL is addtional layer of security to our subnets - we have more than one instance in subnet adding security groups individualy
      to all the instance, by using NACL we can implement security and it will applicable for all the instance which is available in 
      subnet
      


   Peering:

   VPC Peering allows you to connect two VPCs (either within the same AWS account or across accounts) for communication between resources across VPCs.
   Peered VPCs can communicate privately using private IP addresses

   VPN Gateway:

   AWS allows you to establish a Virtual Private Network (VPN) connection between your VPC and your on-premises data center, 
   enabling secure access to your AWS resources from your corporate network.




   ********************************************* how to create VPC in AWS*******************************************************



   ** AWS will be always goes in order - if we have rule 100 and that rule 100 have a permission for allow all the traffic. then AWS will
   check that rule 100 first and allow all the traffic
      1.Even we have rule 200 thats having deny traffic port 8000 - eventhough aws will allow the traffic 8000, because in rule 100
      we have allowed all the traffic so it will excute by the order and range wise 

      AWS demo VPC IP- 



***************************************************Route 53*************************************************************************
Amazon Route 53 is a scalable and highly available Domain Name System (DNS) web service provided by Amazon Web Services (AWS).
Its primary purpose is to route end-user requests to AWS services like EC2 instances, S3 buckets, or load balancers, as well as non-AWS 
resources hosted elsewhere on the internet.

route 53 provide DNS as a service --- DNS(Domain name system)

Doubt --> is dns change our IP address to domain name ?--------------> A big NOOOOOOOO

No, DNS (Domain Name System) doesn't change your IP address to a domain name. Instead, it works the other way around: DNS translates human-readable
domain names (like example.com) into machine-readable IP addresses (like 192.168.1.1 or 2606:4700:4700::1111 for IPv6).


*********************************************How DNS Works in Practice:***************************************************************************
*User Request: When a user enters a domain name (e.g., www.example.com) into their browser, the browser sends a request to a DNS resolver 
(usually provided by your internet service provider or a public DNS server like Google's 8.8.8.8).

*DNS Lookup: The DNS resolver checks its cache to see if it has the IP address for the domain name already stored. 
If not, it will contact other DNS servers (starting with the root DNS server, then top-level domain (TLD) servers, and so on) to find the correct 
IP address for www.example.com.

*IP Address Retrieval: Once the DNS resolver finds the IP address associated with www.example.com (e.g., 93.184.216.34), it sends that IP address 
back to the user's browser.

*Connect to Server: The browser then uses the IP address to connect to the server hosting the website at www.example.com and retrieves the webpage 
content.


1.In hosted zone we will save our DNS record